- name: Create directory to store the downloaded prerequisite files
  ansible.windows.win_file:
    path: C:\setup
    state: directory

# Download win10 iso
- name: Check downloaded iso file exists
  ansible.windows.win_stat:
    path: c:\setup\win_10_22h2.iso
  register: iso_file

- name: Check wim file exists
  ansible.windows.win_stat:
    path: c:\share_iso\install.wim
  register: wim_file

- name: Download win10 iso file (~ 5.4GB )
  ansible.builtin.debug:
    msg: "neither wmi nor iso exist"
  when: not (iso_file.stat.exists or wim_file.stat.exists)

- name: Download win10 iso file (~ 5.4GB )
  ansible.windows.win_get_url:
    url: "{{ win10_iso_url }}"
    dest: 'c:\setup\win_10_22h2.iso'
  when: not (iso_file.stat.exists or wim_file.stat.exists)

- name: Create share folder
  ansible.windows.win_file:
    path: C:\share_iso
    state: directory

- name: Ensure share exists
  ansible.windows.win_share:
    name: share_iso
    description: iso share for all domain users
    path: C:\share_iso
    list: true
    full: Administrators
    change: Users

- name: Check wim file exists
  ansible.windows.win_stat:
    path: c:\share_iso\install.wim
  register: wim_file

# Extract setup.wim from iso
- name: Open ISO and extract wim file
  ansible.windows.win_powershell:
    script: |
      $mountResult = Mount-DiskImage -ImagePath "c:\setup\win_10_22h2.iso"
      $driveLetter = ($mountResult | Get-Volume).DriveLetter
      copy "${driveLetter}:\sources\install.wim" "c:\share_iso\install.wim"
      Dismount-DiskImage -ImagePath "c:\setup\win_10_22h2.iso"
      rm c:\setup\win_10_22h2.iso
  when: not wim_file.stat.exists

# Install operating system image
- name: Create Operating system image
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $siteCode,

          [String]
          $sccmFQDN,

          [String]
          $shareServer
      )
      Import-Module $env:SMS_ADMIN_UI_PATH.Replace("\bin\i386","\bin\configurationmanager.psd1") -force
      $sc = Get-PSDrive -PSProvider CMSITE
      if ($null -eq $sc) {
        New-PSDrive -Name $siteCode -PSProvider "CMSite" -Root $sccmFQDN -Description "primary site"
      }
      Set-Location ($siteCode +":")

      $opsys = Get-CMOperatingSystemImage -Name "Windows_10_22h2"
      if ($null -eq $opsys ){
        $image = New-CMOperatingSystemImage -Name "Windows_10_22h2" -Path "\\${shareServer}\share_iso\install.wim"
        $Ansible.Changed = $true
        # New-CMBootImage -Path "\\${shareServer}\share_iso\install.wim" -Name "Boot image (x64)" -Description "Boot image (x64)" -Version $version -Index 1
        # dism /Get-WimInfo /WimFile:$sourceWimPath
      } else {
        $Ansible.Changed = $false
      }
    parameters:
      siteCode: "{{ cfgmgr_site_code }}"
      shareServer: "{{ cfgmgr_server_cn }}"
      sccmFQDN: "{{ cfgmgr_server_fqdn }}"
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: "{{ cfgmgr_domain_name }}\\Administrator"
    ansible_become_password: "{{ cfgmgr_domain_password }}"

# Create task sequence
- name: Create Task sequence
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $domainName,

          [String]
          $sccmFQDN,

          [String]
          $domainAccount,

          [String]
          $domainPassword,

          [String]
          $ou,

          [String]
          $siteCode,

          [String]
          $shareServer,

          [String]
          $adminPass
      )
      Import-Module $env:SMS_ADMIN_UI_PATH.Replace("\bin\i386","\bin\configurationmanager.psd1") -force
      $sc = Get-PSDrive -PSProvider CMSITE
      if ($null -eq $sc) {
        New-PSDrive -Name $siteCode -PSProvider "CMSite" -Root $sccmFQDN -Description "primary site"
      }
      Set-Location ($siteCode +":")
      $name = "Install_win10_OS_image"

      $ts = Get-CMTaskSequence -name $name

      if ($null -eq $ts){
        # operating system
        $operating_system_image = Get-CMOperatingSystemImage -Name "Windows_10_22h2"
        # boot image
        $boot_image = Get-CMBootImage -name "Boot image (x64)"

        # admin pass
        $adminpass_secure = convertto-securestring -string $adminPass -asplaintext -force

        # client package
        $cp = Get-CMPackage -name "Configuration Manager Client Package"

        $parameters = @{
          InstallOperatingSystemImage = $true
          Name = $name
          Description = "NewInstallOSImage parameter set"
          BootImagePackageId = $boot_image.PackageID
          HighPerformance = $true
          CaptureNetworkSetting = $true
          CaptureUserSetting = $false
          SaveLocally = $true
          CaptureLocallyUsingLink = $true
          CaptureWindowsSetting = $true
          ConfigureBitLocker = $false
          PartitionAndFormatTarget = $true
          ApplyAll = $false
          OperatingSystemImagePackageId = $operating_system_image.PackageID
          OperatingSystemImageIndex = 1
          GeneratePassword = $false
          LocalAdminPassword = $adminpass_secure
          JoinDomain = "DomainType"
          DomainAccount = $domainAccount
          DomainName = $domainName
          DomainOrganizationUnit = $ou
          DomainPassword = ConvertTo-SecureString -String $domainPassword -AsPlainText -Force
          ClientPackagePackageId = $cp.PackageID
          IgnoreInvalidApplication = $false
          SoftwareUpdateStyle = "NoInstall"
        }

        New-CMTaskSequence @parameters
        $Ansible.Changed = $true
      } else {
        $Ansible.Changed = $false
      }
    parameters:
      siteCode: "{{ cfgmgr_site_code }}"
      shareServer: "{{ cfgmgr_server_cn }}"
      adminPass: "{{ cfgmgr_pxe_admin_pass }}"
      domainName: "{{ cfgmgr_domain_name }}"
      ou: "{{ cfgmgr_pxe_location }}"
      domainAccount: "{{ cfgmgr_domain_name }}\\{{ cfgmgr_naa_user }}"
      domainPassword: "{{ cfgmgr_naa_user_pass }}"
      sccmFQDN: "{{ cfgmgr_server_fqdn }}"
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: "{{ cfgmgr_domain_name }}\\Administrator"
    ansible_become_password: "{{ cfgmgr_domain_password }}"

# start distribute content
- name: Start distribute content
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $siteCode,

          [String]
          $sccmFQDN,

          [String]
          $distributionPoint
      )

      $Ansible.Changed = $false
      Import-Module $env:SMS_ADMIN_UI_PATH.Replace("\bin\i386","\bin\configurationmanager.psd1") -force
      $sc = Get-PSDrive -PSProvider CMSITE
      if ($null -eq $sc) {
        New-PSDrive -Name $siteCode -PSProvider "CMSite" -Root $sccmFQDN -Description "primary site"
      }
      Set-Location ($siteCode +":")

      # distribute operating system image
      $PackageId = $null
      $PackageId = (Get-CMBootImage -name "Boot image (x64)").PackageID
      if ($null -eq (Get-CMDistributionStatus -Id $packageID)){
        Start-CMContentDistribution -BootImageID $packageID -DistributionPointName $distributionPoint
        $Ansible.Changed = $true
      }

      $PackageId = $null
      $PackageId = (Get-CMBootImage -name "Boot image (x86)").PackageID
      if ($null -eq (Get-CMDistributionStatus -Id $packageID)){
        Start-CMContentDistribution -BootImageID $packageID -DistributionPointName $distributionPoint
        $Ansible.Changed = $true
      }

      # distribute boot image
      $PackageId = $null
      $PackageId = (Get-CMOperatingSystemImage -name 'Windows_10_22h2').PackageID
      if ($null -eq (Get-CMDistributionStatus -Id $packageID)){
        Start-CMContentDistribution -OperatingSystemImageId $packageID -DistributionPointName $distributionPoint
        $Ansible.Changed = $true
      }
      # distribute Configuration manager client package
      $package = Get-CMDeploymentPackage -DeploymentPackageName "Configuration Manager Client Package" -DistributionPointName $distributionPoint
      if ($null -eq $package) {
        # package not found sleep waiting the Configuration Manager Client Package presence
        Start-Sleep -seconds 300
      }
      $PackageId = $null
      $packageID = (Get-CMDeploymentPackage -DeploymentPackageName "Configuration Manager Client Package" -DistributionPointName $distributionPoint).PackageID
      if ($null -eq (Get-CMDistributionStatus -Id $packageID)) {
        Start-CMContentDistribution -DeploymentPackageId $packageID -DistributionPointName $distributionPoint
        $Ansible.Changed = $true
      }
    parameters:
      siteCode: "{{ cfgmgr_site_code }}"
      distributionPoint: "{{ cfgmgr_server_fqdn }}"
      sccmFQDN: "{{ cfgmgr_server_fqdn }}"
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: "{{ cfgmgr_domain_name }}\\Administrator"
    ansible_become_password: "{{ cfgmgr_domain_password }}"

# update unknow computers
- name: Update unknow computers collection
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $siteCode,

          [String]
          $sccmFQDN
      )
      Import-Module $env:SMS_ADMIN_UI_PATH.Replace("\bin\i386","\bin\configurationmanager.psd1") -force
      $sc = Get-PSDrive -PSProvider CMSITE
      if ($null -eq $sc) {
        New-PSDrive -Name $siteCode -PSProvider "CMSite" -Root $sccmFQDN -Description "primary site"
      }
      Set-Location ($siteCode +":")
      Get-CMCollection -Name "All Unknown Computers" | Invoke-CMCollectionUpdate
    parameters:
      siteCode: "{{ cfgmgr_site_code }}"
      sccmFQDN: "{{ cfgmgr_server_fqdn }}"
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: "{{ cfgmgr_domain_name }}\\Administrator"
    ansible_become_password: "{{ cfgmgr_domain_password }}"

# Deploy sequence
- name: Deploy Task sequence
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $domainName,

          [String]
          $sccmFQDN,

          [String]
          $siteCode
      )
      Import-Module $env:SMS_ADMIN_UI_PATH.Replace("\bin\i386","\bin\configurationmanager.psd1") -force
      $sc = Get-PSDrive -PSProvider CMSITE
      if ($null -eq $sc) {
        New-PSDrive -Name $siteCode -PSProvider "CMSite" -Root $sccmFQDN -Description "primary site"
      }
      Set-Location ($siteCode +":")

      $ts_name = "Install_win10_OS_image"
      $ts = Get-CMTaskSequence -name $ts_name
      $collection = Get-CMCollection -name "All Unknown Computers"
      $ts_deploy= Get-CMTaskSequenceDeployment -CollectionId $collection.CollectionID | where-Object {$_.PackageID -eq $ts.PackageID}
      if ($null -eq $ts_deploy){
        # New-CMTaskSequenceDeployment
        $parameters = @{
          InputObject = $ts
          CollectionId = $collection.CollectionID
          AllowFallback = $true
          Availability = "MediaAndPxe"
          InternetOption = $false
          RunFromSoftwareCenter = $true
          SoftwareInstallation = $true
          SystemRestart = $true
          UseMeteredNetwork = $false
          PersistOnWriteFilterDevice = $true
          ShowTaskSequenceProgress = $true
        }
        New-CMTaskSequenceDeployment @parameters
        $Ansible.Changed = $true
      } else {
        $Ansible.Changed = $false
      }
    parameters:
      siteCode: "{{ cfgmgr_site_code }}"
      domainName: "{{ cfgmgr_domain_name }}"
      sccmFQDN: "{{ cfgmgr_server_fqdn }}"
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: "{{ cfgmgr_domain_name }}\\Administrator"
    ansible_become_password: "{{ cfgmgr_domain_password }}"
