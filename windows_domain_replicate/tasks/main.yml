# DNSCHANGE

# Get-ADReplicationPartnerMetadata –Target * -Scope Server | Where {$_.LastReplicationResult –ne "0"} | Format-Table Server, LastReplicationAttempt, LastReplicationResult, Partner, Site
# Get-ADReplicationPartnerMetadata -Target HQ -Scope Site -Partition * | Where {$_.LastReplicationResult –eq "0"} | Format-Table Server,Partition , LastReplicationAttempt, LastReplicationResult, Partner, Site
# Get-ADReplicationPartnerMetadata -Target rsc01.research.haas.local
# Get-ADReplicationQueueOperation -Server rsc01.research.haas.local
# Get-ADReplicationPartnerMetadata -Target corp-DC01,corp-DC02 -PartnerType Both -Partition Schema
# Get-ADReplicationFailure -Target rsc01.research.haas.local
#
# Get replication partner status
#     repadmin /showrepl
#     Get-ADReplicationPartnerMetadata
# Get Inbound replication queue details
#     repadmin /queue
#     Get-ADReplicationQueueOperation
# Replicate specific AD objects between domain controllers
#     repadmin /replsingleobj
#     Sync-ADObject
# Get replication metadata of an AD object
#     repadmin /showobjmeta
#     Get-ADReplicationAttributeMetadata
# Shows highest committed USN
#     repadmin /showutdvec
#     Get-ADReplicationUpToDatenessVectorTable
# Displays ISTG details
#     repadmin /istg *
#     Get-ADReplicationSite –filter * | Select InterSiteTopologyGenerator
# List all the subnets in the forest
#     dsquery subnet
#     Get-ADReplicationSubnet
# List the AD sites in the domain
#     dsquery site
#     Get-ADReplicationSite

- name: Synchronizes all domains
  ansible.windows.win_shell: repadmin /syncall /AdeP
  become: true
  become_method: ansible.builtin.runas
  become_user: "{{ windows_domain_replicate_domain_name }}\\Administrator"
  vars:
    ansible_become_pass: "{{ windows_domain_replicate_domain_password }}"
  when: windows_domain_replicate_action == "replicate"

# Get-ADReplicationPartnerMetadata -Target rsc01.research.haas.local
# Get-ADReplicationQueueOperation -Server rsc01.research.haas.local

# Get-ADReplicationPartnerMetadata -Target rsc01.research.haas.local
# Get-ADReplicationQueueOperation -Server rsc01.research.haas.local


# https://activedirectorypro.com/repadmin-how-to-check-active-directory-replication/
# Get-ADReplicationPartnerMetadata -Target HQ -Scope Site -Partition * | Where {$_.LastReplicationResult –eq "0"} | Format-Table Server,Partition , LastReplicationAttempt, LastReplicationResult, Partner, Site
- name: "Get Sync status"
  ansible.windows.win_shell: repadmin  /replsummary
  register: sync_summary
  become: true
  become_method: ansible.builtin.runas
  become_user: "{{ windows_domain_replicate_domain_name }}\\Administrator"
  vars:
    ansible_become_pass: "{{ windows_domain_replicate_domain_password }}"
  when: windows_domain_replicate_action == "Summary"
#  debug: var=sync_summary.stdout_lines

- name: Get Sync status
  ansible.windows.win_shell: repadmin  /Queue
  register: sync_queue
  become: true
  become_method: ansible.builtin.runas
  become_user: "{{ windows_domain_replicate_domain_name }}\\Administrator"
  vars:
    ansible_become_pass: "{{ windows_domain_replicate_domain_password }}"
  when: windows_domain_replicate_action == "Queue"

# - debug: var=sync_queue.stdout_lines

# - name: "Get Sync status"
#   win_shell: repadmin  /showrepl
#   register: sync_status
#   become: yes
#   become_method: runas
#   become_user: "{{wd_laps_dc_domain_name}}\\Administrator"
#   vars:
#     ansible_become_pass: "{{wd_laps_dc_domain_password}}"
#
# - debug: var=sync_status.stdout_lines