- name: Install pacman packages
  community.general.pacman:
    name:
      - debugedit
      - fakeroot
      - base-devel
    update_cache: true
  register: __pacman
  changed_when: (__pacman.packages | default([])) | length >0
  loop:

- name: Include asserts.yml
  ansible.builtin.include_tasks: asserts.yml

- name: AUR | get metadata from AurJson api for {{ aur_pkg_name }}
  ansible.builtin.uri:
    url: "https://aur.archlinux.org/rpc.php?v=5&type=info&arg={{ aur_pkg_name | mandatory }}"
    return_content: true
    timeout: 6
  register: __api_info

- name: AUR | assert proper answer
  ansible.builtin.assert:
    that:
      - __api_info.status == 200
      - __api_info.json is defined
      - __api_info.json.type == 'multiinfo'
      - __api_info.json.resultcount == 1
      - __api_info.json.results is defined

- name: AUR |  download tarball {{ aur_pkg_name }}
  ansible.builtin.get_url:
    url: "https://aur.archlinux.org{{ __api_info.json.results[0].URLPath }}"
    dest: "{{ aur_directory }}"
  register: __aur_tarball
  become: false

- name: AUR | unarchive tarball {{ aur_pkg_name }}
  when: __aur_tarball.changed
  become: false
  ansible.builtin.unarchive:
    src: "{{ __aur_tarball.dest }}"
    dest: "{{ aur_directory }}"
    remote_src: true
  register: __extracted_pkg

# This will break if run as root. Set user to use with makepkg with 'makepkg_user' var
- name: AUR | build package, including missing dependencies | {{ aur_pkg_name }}
  when: __extracted_pkg.changed
  become: false
  ansible.builtin.command: >
    makepkg --skippgpcheck --noconfirm --noprogressbar -mfs
    chdir={{ aur_directory }}/{{ aur_pkg_name }}
  register: __aur_makepkg_result

# Shameless variable declaration hack
- name: AUR | get compiled packages from  {{ aur_directory }}/{{ aur_pkg_name | quote }}
  ansible.builtin.shell: ls -1 {{ aur_directory }}/{{ aur_pkg_name | quote }} | grep pkg.tar
  register: __compiled_package_name
  changed_when: false

- name: AUR | install newly-built aur package with pacman from  {{ aur_directory }}/{{ aur_pkg_name | quote }}
  ansible.builtin.shell: pacman --noconfirm --noprogressbar --needed -U {{ aur_compiled_package | quote }}
  args:
    chdir: "{{ aur_directory }}/{{ aur_pkg_name | quote }}/"
  with_items: "{{ __compiled_package_name.stdout_lines }}"
  loop_control:
    loop_var: aur_compiled_package
  register: __pacman_install_result
  changed_when: __pacman_install_result.stdout is defined and __pacman_install_result.stdout.find('there is nothing to do') == -1
  ignore_errors: true
  become: true
