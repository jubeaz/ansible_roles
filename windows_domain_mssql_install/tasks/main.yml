- name: Reboot before install (long timeout in case of update)
  ansible.windows.win_reboot:
    reboot_timeout: 1200

- name: Set download_url
  ansible.builtin.set_fact:
    download_url: "{{ download_url_2022 if sql_version == 'MSSQL_2022' else download_url_2019 }}"

- name: Set connection method
  ansible.builtin.set_fact:
    connection_type: "{{ connection_type_2022 if sql_version == 'MSSQL_2022' else connection_type_2019 }}"

- name: Set mssql_service_instance
  ansible.builtin.set_fact:
    mssql_service_instance: "MSSQL${{ sql_instance_name }}"

- name: Set mssql_service_name
  ansible.builtin.set_fact:
    mssql_service_name: "{{ mssql_service_instance if sql_instance_name != 'MSSQLSERVER' else 'MSSQLSERVER' }}"

- name: Display mssql variables in use
  ansible.builtin.debug:
    msg:
      - "MSSQL version        : {{ sql_version }}"
      - "MSSQL service name   : {{ mssql_service_name }}"
      - "MSSQL download url   : {{ download_url }}"
      - "MSSQL instance       : {{ sql_instance_name }}"
      - "MSSQL connection use : {{ connection_type }}"
      - "SQLSVCACCOUNT        : {{ SQLSVCACCOUNT }}"

- name: Create a directory for installer download
  ansible.windows.win_file:
    path: c:\setup
    state: directory

- name: Download PSTools
  ansible.windows.win_get_url:
    url: "https://download.sysinternals.com/files/PSTools.zip"
    dest: 'c:\setup\PSTools.zip'
  when: ISGMSA

- name: Unzip PSTools
  community.windows.win_unzip:
    src: c:\setup\PSTools.zip
    dest: c:\setup
  when: ISGMSA

- name: Create a directory for installer extraction
  ansible.windows.win_file:
    path: c:\setup\mssql
    state: directory

- name: Create a directory for media extraction
  ansible.windows.win_file:
    path: c:\setup\mssql\media
    state: directory

- name: Create the configuration file
  ansible.windows.win_template:
    src: files/sql_conf.ini.{{ sql_version }}.j2
    dest: c:\setup\mssql\sql_conf.ini

- name: Check downloaded file exists
  ansible.windows.win_stat:
    path: c:\setup\mssql\sql_installer.exe
  register: installer_file

- name: Get the installer
  ansible.windows.win_get_url:
    url: "{{ download_url }}"
    dest: 'c:\setup\mssql\sql_installer.exe'
  when: not installer_file.stat.exists

- name: Add service account to Log on as a service
  ansible.windows.win_user_right:
    name: SeServiceLogonRight
    users:
      - '{{ SQLSVCACCOUNT }}'
    action: add
  when: not mssql_svcaccount_method == 'local'


# - name: Setup service account
# Set-ADUser -Identity "{{SQLSVCACCOUNT}}" -ServicePrincipalNames @{Add='MSSQLSvc/castelblack.north.sevenkingdoms.local'}
# Get-ADUser -Identity "{{SQLSVCACCOUNT}}" | Set-ADAccountControl -TrustedToAuthForDelegation $true
# Set-ADUser -Identity "{{SQLSVCACCOUNT}}" -Add @{'msDS-AllowedToDelegateTo'=@('CIFS/winterfell.north.sevenkingdoms.local','CIFS/winterfell')}

# - name: check install already done
#   win_stat:
#     path: "C:\\Program Files\\Microsoft SQL Server\\MSSQL15.{{sql_instance_name}}"
#   register: mssql_install_already_done

- name: Check MSSQL service already exist (if failed service do not exist, launch install)
  ansible.windows.win_service:
    name: '{{ mssql_service_name }}'
  register: mssql_install_already_done
  failed_when: mssql_install_already_done is not defined
  ignore_errors: true

# - ansible.builtin.debug: msg="{{ mssql_install_already_done }}"

# Install the database with a domain admin user
- name: Install the database
  ansible.windows.win_command: c:\setup\mssql\sql_installer.exe /configurationfile=c:\setup\mssql\sql_conf.ini /IACCEPTSQLSERVERLICENSETERMS /MEDIAPATH=c:\setup\mssql\media /QUIET /HIDEPROGRESSBAR
  args:
    chdir: c:\setup
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: "{{ domain_name }}\\Administrator"
    ansible_become_password: "{{ domain_password }}"
    ansible_become_flags: logon_type=new_credentials logon_flags=netcredentials_only
  register: mssqlinstall
  until: "mssqlinstall is not failed"
  retries: 3
  delay: 120
  when: mssql_install_already_done.state is not defined or mssql_install_already_done.name is not defined
#  when: not mssql_install_already_done.stat.exists

# Â sql server 2022
- name: Add or update registry for ip port
  ansible.windows.win_regedit:
    path: 'HKLM:\Software\Microsoft\Microsoft SQL Server\MSSQL16.{{ sql_instance_name }}\MSSQLServer\SuperSocketNetLib\Tcp\IPAll'
    name: TcpPort
    data: 1433
  register: win_reg
  when: sql_version == "MSSQL_2022"

#  sql server 2019
- name: Add or update registry for ip port
  ansible.windows.win_regedit:
    path: 'HKLM:\Software\Microsoft\Microsoft SQL Server\MSSQL15.{{ sql_instance_name }}\MSSQLServer\SuperSocketNetLib\Tcp\IPAll'
    name: TcpPort
    data: 1433
  register: win_reg
  when: sql_version == "MSSQL_2019"
  notify:
    Reboot


- name: Flush reboot handlers
  ansible.builtin.meta:
    flush_handlers

- name: Firewall | Allow MSSQL through Firewall
  ansible.windows.win_dsc:
    resource_name: xFirewall
    Name: "Access for MSSQL (TCP-In)"
    Ensure: present
    Enabled: true
    Profile: "Domain"
    Direction: "Inbound"
    Localport: "1433"
    Protocol: "TCP"
    Description: "Opens the listener port for MSSQL"

- name: Firewall | Allow MSSQL discover through Firewall
  ansible.windows.win_dsc:
    resource_name: xFirewall
    Name: "Access for MSSQL (UDP-In)"
    Ensure: present
    Enabled: true
    Profile: "Domain"
    Direction: "Inbound"
    Localport: "1434"
    Protocol: "UDP"
    Description: "Opens the discover port for MSSQL"

- name: Be sure service is started
  ansible.windows.win_service:
    name: '{{ mssql_service_name }}'
    force_dependent_services: true
    state: started


- name: Wait for port 1433 to become open on the host, start checking every  seconds '{{ delay_for_1433 }}'
  ansible.windows.win_wait_for:
    port: 1433
    delay: "{{ delay_for_1433 }}"

# - name: Local Account (GMSA)
#   ansible.builtin.include_tasks: local_account_gmsa.yml
#   when: ISGMSA
# 
# - name: Local Account (non GMSA)
#   ansible.builtin.include_tasks: local_account.yml
#   when: not ISGMSA
#
- name: SQL cmd (GMSA)
  ansible.builtin.include_tasks: sqlcmd_gmsa.yml
  when: ISGMSA

- name: SQL cmd (non GMSA)
  ansible.builtin.include_tasks: sqlcmd.yml
  when: not ISGMSA

- name: Restart service MSSQL
  ansible.windows.win_service:
    name: '{{ mssql_service_name }}'
    force_dependent_services: true
    state: restarted
  register: mssql_status

- name: Fail when mssql not running
  ansible.builtin.fail:
    msg: "mssql not started"
  when: mssql_status.state != "running"

- name: Fix MSSQL generate certificate issue (change crypto rsa permissions)
  ansible.windows.win_acl:
    path: C:\ProgramData\Microsoft\Crypto\RSA
    user: Administrators
    rights: FullControl
    type: allow
    state: present
    inherit: ContainerInherit, ObjectInherit
    propagation: 'InheritOnly'
