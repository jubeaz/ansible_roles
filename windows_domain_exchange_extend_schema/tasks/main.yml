- name: Save timeout parameters
  ansible.builtin.set_fact:
    ansible_winrm_connection_timeout_save: "{{ ansible_winrm_connection_timeout }}"
    ansible_psrp_connection_timeout_save: "{{ ansible_psrp_connection_timeout }}"
    ansible_psrp_operation_timeout_save: "{{ ansible_psrp_operation_timeout }}"
    ansible_psrp_read_timeout_save: "{{ ansible_psrp_read_timeout }}"

- name: ansible timeout to 1 hour
  ansible.builtin.set_fact:
    ansible_winrm_connection_timeout: 3600
    ansible_psrp_connection_timeout: 3600
    ansible_psrp_operation_timeout: 3600
    ansible_psrp_read_timeout: 3800

- name: Create directory to store the downloaded prerequisite files
  ansible.windows.win_file:
    path: C:\setup
    state: directory

#$msiPath = "C:\Path\To\YourFile.msi"
#$windowsInstaller = New-Object -ComObject WindowsInstaller.Installer
#$database = $windowsInstaller.GetType().InvokeMember("OpenDatabase", "InvokeMethod", $null, $windowsInstaller, @($msiPath, 0))
#$productCodeQuery = "SELECT Value FROM Property WHERE Property = 'ProductCode'"
#$view = $database.GetType().InvokeMember("OpenView", "InvokeMethod", $null, $database, @($productCodeQuery))
#$view.GetType().InvokeMember("Execute", "InvokeMethod", $null, $view, $null)
#$record = $view.GetType().InvokeMember("Fetch", "InvokeMethod", $null, $view, $null)
#$productCode = $record.GetType().InvokeMember("StringData", "GetProperty", $null, $record, 1)
#Write-Output "Product Code: $productCode"

- name: Install PowerShell 7.5 from msi with a permanent log
  ansible.windows.win_package:
    path: https://github.com/PowerShell/PowerShell/releases/download/v7.5.0/PowerShell-7.5.0-win-x64.msi
    product_id: '{D012DCD1-67EA-4627-938F-19FD677FC03A}'
    state: present
    log_path: C:\setup\PowerShell-7.5.0.log

- name: Check Echange installation media exists
  ansible.windows.win_stat:
    path: "C:\\setup\\{{ wd_xchg_es_installation_media_name }}"
  register: echange_installer_file

#- name: Download Echange installation media
#  ansible.windows.win_get_url:
#    url: "{{ wd_xchg_es_installation_media_url }}"
#    dest: "C:\\setup\\{{ wd_xchg_es_installation_media_name }}"
#    url_timeout: 3600
#  when: not echange_installer_file.stat.exists


- name: Download Echange installation media
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $URL,
          [String]
          $AppPath
      )
      $Ansible.Changed = $true
      try {
        invoke-webrequest -URI $URL -OutFile $AppPath -UseBasicParsing -OperationTimeoutSeconds 360
      }
      catch {
        $Ansible.Failed = $true
        Throw "Error Downloading"
      }
    parameters:
      URL: "{{ wd_xchg_es_installation_media_url }}"
      AppPath: "c:\\Setup\\{{ wd_xchg_es_installation_media_name }}"
    executable: "C:\\Program Files\\PowerShell\\7\\pwsh.exe"
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: "{{ domain_name }}\\Administrator"
    ansible_become_password: "{{ domain_password }}"
  when: not echange_installer_file.stat.exists

- name: Install WindowsFeature RSAT-ADDS
  ansible.windows.win_feature:
    name: RSAT-ADDS
    state: present
    include_management_tools: true

- name: Check AD Schema
  ansible.builtin.include_tasks: validate_ad_schema.yml

- name: Extend Active Directory Schema
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $ISOName
      )
      $mountResult = Mount-DiskImage -ImagePath "c:\setup\$ISOName"
      $driveLetter = ($mountResult | Get-Volume).DriveLetter
      $command = "${driveLetter}:\Setup.exe /IAcceptExchangeServerLicenseTerms_DiagnosticDataOFF /PrepareSchema"
      Invoke-Expression $command
      Dismount-DiskImage -ImagePath "c:\setup\$ISOName"
    parameters:
      ISOName: "{{ wd_xchg_es_installation_media_name }}"
  when: validate_ad_schema.failed
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: "{{ domain_name }}\\Administrator"
    ansible_become_password: "{{ domain_password }}"

- name: Check AD Schema updated successfully
  ansible.builtin.include_tasks: validate_ad_schema.yml
  when: validate_ad_schema.failed

- name: Failed
  ansible.builtin.fail:
    msg: "AD schema update failed"
  when: validate_ad_schema.failed

- name: Synchronizes all domains
  ansible.windows.win_shell: repadmin /syncall /AdeP
  vars:
    become: true
    become_method: ansible.builtin.runas
    become_user: "{{ domain_name }}\\Administrator"
    ansible_become_pass: "{{ domain_password }}"
  when: wd_xchg_es_multi_domain_forest

- name: Check AD Prepared
  ansible.builtin.include_tasks: validate_ad_prepared.yml

- name: Prepare Active Directory (containers creation)
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $ISOName,
          [String]
          $CorpName
      )
      $mountResult = Mount-DiskImage -ImagePath "c:\setup\$ISOName"
      $driveLetter = ($mountResult | Get-Volume).DriveLetter
      $command = "${driveLetter}:\Setup.exe /IAcceptExchangeServerLicenseTerms_DiagnosticDataOFF /PrepareAD /OrganizationName:`"$CorpName`""
      Invoke-Expression $command
      Dismount-DiskImage -ImagePath "c:\setup\$ISOName"
    parameters:
      ISOName: "{{ wd_xchg_es_installation_media_name }}"
      CorpName: "{{ wd_xchg_es_corp_name }}" 
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: "{{ domain_name }}\\Administrator"
    ansible_become_password: "{{ domain_password }}"
  when: validate_ad_prepared.failed

- name: Prepare Active Directory Forest
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $ISOName
      )
      $mountResult = Mount-DiskImage -ImagePath "c:\setup\$ISOName"
      $driveLetter = ($mountResult | Get-Volume).DriveLetter
      $command = "${driveLetter}:\Setup.exe /IAcceptExchangeServerLicenseTerms_DiagnosticDataOFF /PrepareAllDomains"
      Invoke-Expression $command
      Dismount-DiskImage -ImagePath "c:\setup\$ISOName"
    parameters:
      ISOName: "{{ wd_xchg_es_installation_media_name }}"
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: "{{ domain_name }}\\Administrator"
    ansible_become_password: "{{ domain_password }}"
  when: validate_ad_prepared.failed

- name: Check AD Prepare successfully
  ansible.builtin.include_tasks: validate_ad_schema.yml
  when: validate_ad_prepared.failed

- name: restore timeout 
  ansible.builtin.set_fact:
    ansible_psrp_connection_timeout: "{{ ansible_psrp_connection_timeout_save }}"
    ansible_psrp_operation_timeout: "{{ ansible_psrp_operation_timeout_save }}"
    ansible_winrm_connection_timeout: "{{ ansible_winrm_connection_timeout_save }}"
    ansible_psrp_read_timeout: "{{ ansible_psrp_read_timeout_save }}"

