- name: Create the System Management Container
  ansible.windows.win_powershell:
    script: |
      $systemDN = "CN=System," + (Get-ADDomain).DistinguishedName
      New-ADObject -Type container -Name "System Management" -Path $systemDN
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: "{{ domain_name }}\\Administrator"
    ansible_become_password: "{{ domain_password }}"

- name: Grant GenericAll on the System Management Container to "{{ sccm_server }}"
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $SCCMServer
      )
      $systemMgmtDN = "CN=System Management,CN=System," + (Get-ADDomain).DistinguishedName
      $acl = Get-ACL -Path "AD:\$systemMgmtDN"
      $sccmIdentity = Get-ADComputer -Identity $SCCMServer
      $ace = New-Object System.DirectoryServices.ActiveDirectoryAccessRule $sccmIdentity.SID, "GenericAll", "Allow"
      $acl.AddAccessRule($ace)
      Set-ACL -Path "AD:\$systemMgmtDN" -AclObject $acl
    parameters:
      SCCMServer: "{{ sccm_server }}"
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: "{{ domain_name }}\\Administrator"
    ansible_become_password: "{{ domain_password }}"

- name: Create directory to store the downloaded prerequisite files
  ansible.windows.win_file:
    path: C:\setup
    state: directory

- name: Check MECM installation media exists
  ansible.windows.win_stat:
    path: "C:\\setup\\{{ sccm_installation_media_url }}"
  register: mecm_installer_file

- name: Download MECM installation media
  ansible.windows.win_get_url:
    url: "{{ sccm_installation_media_url }}"
    dest: "C:\\setup\\{{ sccm_installation_media_name }}"
  when: not mecm_installer_file.stat.exists

- name: Remove directory if exist
  ansible.windows.win_file:
    path: C:\setup\cd.retail.LN
    state: absent

- name: Extract MECM installation media
  ansible.windows.win_shell: .\{{ sccm_installation_media_name }} -s
  args:
    chdir: C:\setup

- name: Synchronizes all domains
  ansible.windows.win_shell: repadmin /syncall /AdeP
  become: true
  become_method: ansible.builtin.runas
  become_user: "{{ domain_name }}\\Administrator"
  vars:
    ansible_become_pass: "{{ domain_password }}"

- name: Launching the Active Directory schema extension
  ansible.windows.win_shell: .\extadsch.exe
  args:
    chdir: C:\setup\cd.retail.LN\SMSSETUP\BIN\X64
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: "{{ domain_name }}\\Administrator"
    ansible_become_password: "{{ domain_password }}"
  register: extadsch_result

# - debug: var=extadsch_result.stdout_lines

# https://activedirectorypro.com/repadmin-how-to-check-active-directory-replication/

- name: Replication partner and status
  ansible.windows.win_shell: repadmin  /showrepl
  register: sync_status
  become: true
  become_user: "{{ domain_name }}\\Administrator"
  vars:
    ansible_become_pass: "{{ domain_password }}"
  when: extadsch_result.failed

# - debug: var=sync_status.stdout_lines

- name: Show replication Queue
  ansible.windows.win_shell: repadmin  /Queue
  register: sync_queue
  become: true
  become_method: ansible.builtin.runas
  become_user: "{{ domain_name }}\\Administrator"
  vars:
    ansible_become_pass: "{{ domain_password }}"
  when: extadsch_result.failed

# - debug: var=sync_queue.stdout_lines


# - name: Replication status summary (overall health)
#   ansible.windows.win_shell: repadmin  /replsummary
#   register: sync_summary
#   become: true
#   become_method: ansible.builtin.runas
#   become_user: "{{ domain_name }}\\Administrator"
#   vars:
#     ansible_become_pass: "{{ domain_password }}"
#   when: extadsch_result.failed

#  debug: var=sync_summary.stdout_lines

- name: Remove directory storing prerequisite files
  ansible.windows.win_file:
    path: C:\setup
    state: absent
  when: extadsch_result is succeeded
